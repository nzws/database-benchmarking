import { bench } from "bench";

// generated by fetch-cf-regions.js
const ASIA_REGIONS = new Set([
  "AMD",
  "ALA",
  "BLR",
  "BKK",
  "BWN",
  "CEB",
  "IXC",
  "CGD",
  "MAA",
  "CGP",
  "CMB",
  "DAC",
  "FUO",
  "FUK",
  "FOC",
  "CAN",
  "HAK",
  "HAN",
  "SJW",
  "SGN",
  "HKG",
  "HYD",
  "ISB",
  "CGK",
  "TNA",
  "JHB",
  "KNU",
  "KHH",
  "KHI",
  "KTM",
  "CCU",
  "KJA",
  "KUL",
  "PKX",
  "MFM",
  "MLE",
  "MNL",
  "BOM",
  "NAG",
  "OKA",
  "DEL",
  "KIX",
  "PAT",
  "PNH",
  "TAO",
  "ICN",
  "SHA",
  "SIN",
  "URT",
  "TPE",
  "NRT",
  "ULN",
  "VTE",
  "KHN",
  "EVN",
  "JOG",
  "ZGN",
  "CGY",
  "COK",
  "DPS",
  "CNN",
  "SZX",
  "KWE",
  "HGH",
  "CZX",
  "KMG",
  "CNX",
  "CGO",
  "TYN",
  "CSX",
  "DLC",
  "BHY",
  "CKG",
  "XFN",
  "DAD",
  "JXG",
  "CRK",
  "PBH",
  "XIY",
  "CTU",
  "NQZ",
  "NNG",
  "TNA",
  "KCH",
  "AKX",
  "HAK",
  "KHN",
  "MLE",
  "TEN",
  "HYN",
  "SJW",
  "XNN",
  "FRU",
]);

export default {
  async fetch(request, env): Promise<Response> {
    const url = new URL(request.url);
    if (!(url.pathname === "/hook" && request.method === "POST")) {
      return new Response("Not Found", { status: 404 });
    }

    const region = request.cf?.colo ?? "unknown";
    const isAsia = ASIA_REGIONS.has(region);
    console.log(`Request received at region: ${region}, isAsia: ${isAsia}`);

    const regionKey = isAsia ? "sin" : "iad";
    const database = {
      sin: env.DB_SIN.connectionString,
      iad: env.DB_IAD.connectionString,
    }[regionKey];
    if (!database) {
      console.error(`No database configured for region key: ${regionKey}`);
      return new Response("Database configuration error", { status: 500 });
    }

    await bench({
      connectionString: database,
      AXIOM_TOKEN: env.AXIOM_TOKEN,
      AXIOM_DATASET: env.AXIOM_DATASET,
      environment: `cloudflare-workers-${region}-db-${regionKey}`,
    });

    return new Response("OK");
  },
} satisfies ExportedHandler<Env>;
